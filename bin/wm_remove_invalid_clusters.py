import os
import argparse
import numpy
import shutil
import vtk

try:
    import whitematteranalysis as wma
except:
    print "<wm_remove_invalid_clusters.py> Error importing white matter analysis package\n"
    raise

#-----------------
# Parse arguments
#-----------------
parser = argparse.ArgumentParser(
    description="Remove the invalid clusters after the hemisphere separation according to wm_assess_cluster_location.py. "
                "Each cluster will belong to either commissural or hemispheric. For a commissural cluster, if there are fibers"
                "separated into left or right hemisphere will be considered as invalid. For a commissural cluster, if there are fibers"
                "separated into commissural region will be considered as invalid",
    epilog="Written by Fan Zhang, fzhang@bwh.harvard.edu",
    version='1.0')

parser.add_argument(
    'inputDirectory',
    help='Directory of the separated clusters, obtained using wm_separate_clusters_by_hemispheres.py. '
         'It should contains folders of tracts_commissural, tracts_left_hemisphere, tracts_right_hemisphere.'
         'A folder named invalid will be created under each of these three clusters to store the invalid clusters.'
         'A empty vtk file will be outputted for the invalid cluster.')
parser.add_argument(
    'clusterLocationFile',
    help='A file showing the cluster location information, obtained using wm_assess_cluster_location.py')
parser.add_argument(
    '-column',
    dest='column', type=int, default=5,
    help='Specify which column in the location file is used. Default using the 5th (location) column, which generated by wm_assess_cluster_location.py.'
         'Users could adjust this file according to their manual decision, given there could be Not Given location.')
parser.add_argument(
    '-outputEmptyCluster', action='store_true', dest="outputEmptyCluster",
    help='Output an empty vtk of each valid cluster.')

args = parser.parse_args()

if not os.path.isdir(args.inputDirectory):
    print "<wm_remove_invalid_clusters> Error: Input directory", args.inputDirectory, "does not exist."
    exit()

comm_dir = os.path.join(args.inputDirectory, 'tracts_commissural')
left_dir = os.path.join(args.inputDirectory, 'tracts_left_hemisphere')
right_dir = os.path.join(args.inputDirectory, 'tracts_right_hemisphere')

if not (os.path.isdir(comm_dir) or os.path.isdir(left_dir) or os.path.isdir(right_dir)):
    print "<wm_remove_invalid_clusters> Error: sub-folder tracts_commissural, tracts_left_hemisphere or tracts_right_hemisphere does not exist."
    exit()
else:
    num_clusters_c = len(wma.io.list_vtk_files(comm_dir))
    num_clusters_l = len(wma.io.list_vtk_files(left_dir))
    num_clusters_r = len(wma.io.list_vtk_files(right_dir))

    if len(numpy.unique((num_clusters_c, num_clusters_l, num_clusters_r))) != 1 or num_clusters_c == 0:
        print "<wm_remove_invalid_clusters> Error: the sub-folders of tracts_commissural, tracts_left_hemisphere or " \
              "tracts_right_hemisphere do not contains the same number of clusters or they are empty: ",
        print num_clusters_c, num_clusters_l, num_clusters_l
        exit()
    else:
        num_clusters = num_clusters_c

if not os.path.exists(args.clusterLocationFile):
    print "<wm_remove_invalid_clusters> Error: Location file", args.clusterLocationFile, "does not exist."
    exit()

print ""
print "<wm_append_cluster> Starting appending cluster."
print ""
print "=====input directory======\n", args.inputDirectory
print "=====cluster location file====\n", args.clusterLocationFile
print "=====column in the location file to be used====\n", args.column
print ""

location_csv = numpy.genfromtxt(args.clusterLocationFile, delimiter='\t', dtype="|S")

if num_clusters != location_csv.shape[0]-1:
    print "<wm_remove_invalid_clusters> Error: number of clusters in the location file is not equal to the vtk file number in the input folder. "
    exit()

comm_invalid_dir = os.path.join(comm_dir, 'invalid')
left_invalid_dir = os.path.join(left_dir, 'invalid')
right_invalid_dir = os.path.join(right_dir, 'invalid')

if os.path.exists(comm_invalid_dir) or os.path.exists(left_invalid_dir) or os.path.exists(right_invalid_dir):
    print "<wm_remove_invalid_clusters> Error: invalid cluster folder exists. Please remove if they are empty."
    print "rm -r", comm_invalid_dir
    print "rm -r",left_invalid_dir
    print "rm -r",right_invalid_dir, "\n"
    exit()
else:
    os.mkdir(comm_invalid_dir)
    os.mkdir(left_invalid_dir)
    os.mkdir(right_invalid_dir)

print "<wm_remove_invalid_clusters> Invalid clusters will be moved to:"
print comm_invalid_dir
print left_invalid_dir
print right_invalid_dir

location_per_cluster = location_csv[1:, args.column-1]
empty_vtk = vtk.vtkPolyData()
num_of_invalid_comm = 0
num_of_invalid_hemi = 0
for c_idx in range(num_clusters):

    print ' - cluster_{0:05d}'.format(c_idx+1), 'is a', location_per_cluster[c_idx], 'cluster.'

    if location_per_cluster[c_idx] == 'hemispheric':
        print '  - commissural cluster_{0:05d}.vtp'.format(c_idx+1), 'move to invalid.'
        shutil.move(os.path.join(comm_dir, 'cluster_{0:05d}.vtp'.format(c_idx+1)), comm_invalid_dir)
        num_of_invalid_comm = num_of_invalid_comm + 1

        if args.outputEmptyCluster:
            wma.io.write_polydata(empty_vtk, os.path.join(comm_dir, 'cluster_{0:05d}.vtp'.format(c_idx+1)))

    elif location_per_cluster[c_idx] == 'commissural':
        print '  - hemispheric cluster_{0:05d}.vtp'.format(c_idx + 1), 'move to invalid.'
        shutil.move(os.path.join(left_dir, 'cluster_{0:05d}.vtp'.format(c_idx + 1)), left_invalid_dir)
        shutil.move(os.path.join(right_dir, 'cluster_{0:05d}.vtp'.format(c_idx + 1)), right_invalid_dir)
        num_of_invalid_hemi = num_of_invalid_hemi + 1

        if args.outputEmptyCluster:
            wma.io.write_polydata(empty_vtk, os.path.join(left_dir, 'cluster_{0:05d}.vtp'.format(c_idx + 1)))
            wma.io.write_polydata(empty_vtk, os.path.join(right_dir, 'cluster_{0:05d}.vtp'.format(c_idx + 1)))

print '<wm_remove_invalid_clusters> Number of invalid commissural clusters:', num_of_invalid_comm
print '<wm_remove_invalid_clusters> Number of invalid hemispheric clusters:', num_of_invalid_hemi
print '\n<wm_remove_invalid_clusters> Done!'