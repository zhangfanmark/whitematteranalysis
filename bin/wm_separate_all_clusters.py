import os
import argparse
import numpy
import vtk

try:
    import whitematteranalysis as wma
except:
    print "<wm_separate_all_clusters.py> Error importing white matter analysis package\n"
    raise

#-----------------
# Parse arguments
#-----------------
parser = argparse.ArgumentParser(
    description="Separate the clusters in a VTK file that generated by wm_combine_all_clusters.py.",
    epilog="Written by Fan Zhang, fzhang@bwh.harvard.edu",
    version='1.0')

parser.add_argument(
    'inputFile',
    help='A file of the combined clusters as a vtkPolyData file (.vtk or .vtp).)')
parser.add_argument(
    'outputDirectory',
    help='The output directory should be a new empty directory. It will be created if needed.')
parser.add_argument(
    '-k', dest='number_of_clusters',
    type=int,
    help='Specify the number of clusters in the combined VTK file.')

args = parser.parse_args()

if not os.path.exists(args.inputFile):
    print "<wm_separate_all_clusters> Error: Input file", args.inputFile, "does not exist."
    exit()

if not os.path.exists(args.outputDirectory):
    print "<wm_separate_all_clusters> Output directory", args.outputDirectory, "does not exist, creating it."
    os.makedirs(args.outputDirectory)

print ""
print "<wm_combine_all_clusters> Start combining all clusters."
print ""
print "=====input vtk file======\n", args.inputFile
print "=====output directory=====\n", args.outputDirectory
print ""

vtk_file_name = os.path.split(args.inputFile)[1]

if vtk_file_name.find('left') > -1:
    hemi = 'tracts_left_hemisphere'
    pos = vtk_file_name.find('left')
elif vtk_file_name.find('right') > -1:
    hemi = 'tracts_right_hemisphere'
    pos = vtk_file_name.find('right')
elif vtk_file_name.find('commissural') > -1:
    hemi = 'tracts_commissural'
    pos = vtk_file_name.find('commissural')
else:
    hemi = 'bilateral'
    pos = vtk_file_name.find('bilateral')

subID = vtk_file_name[18:pos-1]
if not hemi == 'bilateral':
    outputdir = os.path.join(args.outputDirectory, hemi)

if not os.path.exists(outputdir):
    print '<wm_separate_all_clusters> Creating result folder:', outputdir
    os.makedirs(outputdir)

pd_combined_clusters = wma.io.read_polydata(args.inputFile)
num_fibers = pd_combined_clusters.GetNumberOfLines()
inpoints = pd_combined_clusters.GetPoints()
inpointdata = pd_combined_clusters.GetPointData()
point_data_array_indices = range(inpointdata.GetNumberOfArrays())

flag = False
for idx in point_data_array_indices:
    cluster_idx_array = inpointdata.GetArray(idx)
    if cluster_idx_array.GetName() == 'cluster_idx':
        flag = True
        break

if not flag:
    print '<wm_separate_all_clusters> Error: cluster_idx is not found in pointdata in the vtk file'
    exit()

cluster_mask = numpy.zeros(num_fibers)

ptids = vtk.vtkIdList()
pd_combined_clusters.GetLines().InitTraversal()
for lidx in range(0, num_fibers):
    pd_combined_clusters.GetLines().GetNextCell(ptids)
    t = cluster_idx_array.GetTuple(ptids.GetId(0))
    cluster_mask[lidx] = t[0] - 1

pd_c_list = wma.cluster.mask_all_clusters(pd_combined_clusters, cluster_mask, args.number_of_clusters, preserve_point_data=True, preserve_cell_data=True,verbose=True)

print "<wm_separate_all_clusters> Separating clusters:",
for c in range(args.number_of_clusters):
    print c,
    pd_c = pd_c_list[c]
    # The clusters are stored starting with 1, not 0, for user friendliness.
    fname_c = 'cluster_{0:05d}.vtp'.format(c+1)
    wma.io.write_polydata(pd_c, os.path.join(outputdir, fname_c))

print '<wm_combine_all_clusters> Save result to', outputdir
print '<wm_combine_all_clusters> Done for a total of', len(wma.io.list_vtk_files(outputdir)), 'clusters. \n'








